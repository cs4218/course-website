
    var pageVueRenderFn = function anonymous(
) {
with(this){return _c('div',{attrs:{"id":"app"}},[_c('header',{attrs:{"sticky":""}},[_c('navbar',{attrs:{"type":"dark"},scopedSlots:_u([{key:"brand",fn:function(){return [_c('a',{staticClass:"navbar-brand",attrs:{"href":"/course-website/index.html","title":"Home"}},[_v("CS3203")])]},proxy:true},{key:"right",fn:function(){return [_c('li',[_c('form',{staticClass:"navbar-form"},[_c('searchbar',{attrs:{"data":searchData,"placeholder":"Search","on-hit":searchCallback,"menu-align-right":""}})],1)])]},proxy:true}])})],1),_v(" "),_c('div',{attrs:{"id":"flex-body"}},[_c('overlay-source',{attrs:{"id":"site-nav","tag-name":"nav","to":"site-nav"}},[_c('div',{staticClass:"site-nav-top"},[_c('div',{staticClass:"fw-bold mb-2",staticStyle:{"font-size":"1.25rem"}},[_v("Content")])]),_v(" "),_c('div',{staticClass:"nav-component slim-scroll"},[_c('site-nav',[_c('overlay-source',{staticClass:"site-nav-list site-nav-list-root",attrs:{"tag-name":"ul","to":"mb-site-nav"}},[_c('li',[_c('div',{staticClass:"site-nav-default-list-item site-nav-list-item-0",attrs:{"onclick":"handleSiteNavClick(this)"}},[_c('a',{attrs:{"href":"/course-website/index.html"}},[_v("Home üè†")])])]),_v(" "),_c('li',[_c('div',{staticClass:"site-nav-default-list-item site-nav-list-item-0",attrs:{"onclick":"handleSiteNavClick(this)"}},[_c('a',{attrs:{"href":"/course-website/contents/update-history.html"}},[_v("Update History")])])]),_v(" "),_c('li',[_c('div',{staticClass:"site-nav-default-list-item site-nav-list-item-0",attrs:{"onclick":"handleSiteNavClick(this)"}},[_c('a',{attrs:{"href":"/course-website/contents/important-dates.html"}},[_v("Important Dates")])])]),_v(" "),_c('li',[_c('div',{staticClass:"site-nav-default-list-item site-nav-list-item-0",attrs:{"onclick":"handleSiteNavClick(this)"}},[_c('a',{attrs:{"href":"/course-website/contents/team-formation.html"}},[_v("Team Formation")])])]),_v(" "),_c('li',[_c('div',{staticClass:"site-nav-default-list-item site-nav-list-item-0",attrs:{"onclick":"handleSiteNavClick(this)"}},[_v("Tools \n\n"),_c('i',{staticClass:"site-nav-dropdown-btn-icon site-nav-rotate-icon",attrs:{"onclick":"handleSiteNavClick(this.parentNode, false); event.stopPropagation();"}},[_c('span',{staticClass:"glyphicon glyphicon-menu-down",attrs:{"aria-hidden":"true"}})])]),_c('ul',{staticClass:"site-nav-dropdown-container site-nav-dropdown-container-open site-nav-list"},[_c('li',[_c('div',{staticClass:"site-nav-default-list-item site-nav-list-item-1",attrs:{"onclick":"handleSiteNavClick(this)"}},[_c('a',{attrs:{"href":"/course-website/contents/tools/introduction.html"}},[_v("Introduction")])])]),_v(" "),_c('li',[_c('div',{staticClass:"site-nav-default-list-item site-nav-list-item-1",attrs:{"onclick":"handleSiteNavClick(this)"}},[_c('a',{attrs:{"href":"/course-website/contents/tools/downloads.html"}},[_v("Downloads")])])]),_v(" "),_c('li',[_c('div',{staticClass:"site-nav-default-list-item site-nav-list-item-1",attrs:{"onclick":"handleSiteNavClick(this)"}},[_c('a',{attrs:{"href":"/course-website/contents/tools/windows-spa.html"}},[_v("Windows Startup SPA Solution")])])]),_v(" "),_c('li',[_c('div',{staticClass:"site-nav-default-list-item site-nav-list-item-1",attrs:{"onclick":"handleSiteNavClick(this)"}},[_c('a',{attrs:{"href":"/course-website/contents/tools/cross-platform-spa.html"}},[_v("Cross-platform Startup SPA Solution")])])]),_v(" "),_c('li',[_c('div',{staticClass:"site-nav-default-list-item site-nav-list-item-1",attrs:{"onclick":"handleSiteNavClick(this)"}},[_c('a',{attrs:{"href":"/course-website/contents/tools/autotester-testing.html"}},[_v("Autotester Integration and Testing")])])]),_v(" "),_c('li',[_c('div',{staticClass:"site-nav-default-list-item site-nav-list-item-1",attrs:{"onclick":"handleSiteNavClick(this)"}},[_c('a',{attrs:{"href":"/course-website/contents/tools/version-control-repository.html"}},[_v("Version Control System and Code Repository")])])]),_v(" "),_c('li',[_c('div',{staticClass:"site-nav-default-list-item site-nav-list-item-1",attrs:{"onclick":"handleSiteNavClick(this)"}},[_c('a',{attrs:{"href":"/course-website/contents/tools/project-management.html"}},[_v("Project Management")])])]),_v(" "),_c('li',[_c('div',{staticClass:"site-nav-default-list-item site-nav-list-item-1",attrs:{"onclick":"handleSiteNavClick(this)"}},[_c('a',{attrs:{"href":"/course-website/contents/tools/continuous-integration.html"}},[_v("Continuous Integration")])])]),_v(" "),_c('li',[_c('div',{staticClass:"site-nav-default-list-item site-nav-list-item-1",attrs:{"onclick":"handleSiteNavClick(this)"}},[_c('a',{attrs:{"href":"/course-website/contents/tools/java-development.html"}},[_v("Under Beta - Java Development")])])])])]),_v(" "),_c('li',[_c('div',{staticClass:"site-nav-default-list-item site-nav-list-item-0",attrs:{"onclick":"handleSiteNavClick(this)"}},[_v("SPA Requirements - Basic SPA \n\n"),_c('i',{staticClass:"site-nav-dropdown-btn-icon site-nav-rotate-icon",attrs:{"onclick":"handleSiteNavClick(this.parentNode, false); event.stopPropagation();"}},[_c('span',{staticClass:"glyphicon glyphicon-menu-down",attrs:{"aria-hidden":"true"}})])]),_c('ul',{staticClass:"site-nav-dropdown-container site-nav-dropdown-container-open site-nav-list"},[_c('li',[_c('div',{staticClass:"site-nav-default-list-item site-nav-list-item-1",attrs:{"onclick":"handleSiteNavClick(this)"}},[_c('a',{attrs:{"href":"/course-website/contents/basic-spa-requirements/motivation.html"}},[_v("Motivation")])])]),_v(" "),_c('li',[_c('div',{staticClass:"site-nav-default-list-item site-nav-list-item-1",attrs:{"onclick":"handleSiteNavClick(this)"}},[_c('a',{attrs:{"href":"/course-website/contents/basic-spa-requirements/simple-programming.html"}},[_v("SIMPLE Programming Language")])])]),_v(" "),_c('li',[_c('div',{staticClass:"site-nav-default-list-item site-nav-list-item-1",attrs:{"onclick":"handleSiteNavClick(this)"}},[_c('a',{attrs:{"href":"/course-website/contents/basic-spa-requirements/abstract-syntax-tree.html"}},[_v("Abstract Syntax Tree")])])]),_v(" "),_c('li',[_c('div',{staticClass:"site-nav-default-list-item site-nav-list-item-1",attrs:{"onclick":"handleSiteNavClick(this)"}},[_c('a',{attrs:{"href":"/course-website/contents/basic-spa-requirements/design-entities.html"}},[_v("Design Entities")])])]),_v(" "),_c('li',[_c('div',{staticClass:"site-nav-default-list-item site-nav-list-item-1",attrs:{"onclick":"handleSiteNavClick(this)"}},[_c('a',{attrs:{"href":"/course-website/contents/basic-spa-requirements/design-abstractions.html"}},[_v("Design Abstractions")])])]),_v(" "),_c('li',[_c('div',{staticClass:"site-nav-default-list-item site-nav-list-item-1",attrs:{"onclick":"handleSiteNavClick(this)"}},[_v("Program Query Language (PQL) \n\n"),_c('i',{staticClass:"site-nav-dropdown-btn-icon site-nav-rotate-icon",attrs:{"onclick":"handleSiteNavClick(this.parentNode, false); event.stopPropagation();"}},[_c('span',{staticClass:"glyphicon glyphicon-menu-down",attrs:{"aria-hidden":"true"}})])]),_c('ul',{staticClass:"site-nav-dropdown-container site-nav-dropdown-container-open site-nav-list"},[_c('li',[_c('div',{staticClass:"site-nav-default-list-item site-nav-list-item-2",attrs:{"onclick":"handleSiteNavClick(this)"}},[_c('a',{attrs:{"href":"/course-website/contents/basic-spa-requirements/program-query-language/introduction.html"}},[_v("Introduction")])])]),_v(" "),_c('li',[_c('div',{staticClass:"site-nav-default-list-item site-nav-list-item-2",attrs:{"onclick":"handleSiteNavClick(this)"}},[_v("Further PQL Discussion \n\n"),_c('i',{staticClass:"site-nav-dropdown-btn-icon site-nav-rotate-icon",attrs:{"onclick":"handleSiteNavClick(this.parentNode, false); event.stopPropagation();"}},[_c('span',{staticClass:"glyphicon glyphicon-menu-down",attrs:{"aria-hidden":"true"}})])]),_c('ul',{staticClass:"site-nav-dropdown-container site-nav-dropdown-container-open site-nav-list"},[_c('li',[_c('div',{staticClass:"site-nav-default-list-item site-nav-list-item-3",attrs:{"onclick":"handleSiteNavClick(this)"}},[_c('a',{attrs:{"href":"/course-website/contents/basic-spa-requirements/program-query-language/such-that-clause.html"}},[_v("Such-That Clauses")])])]),_v(" "),_c('li',[_c('div',{staticClass:"site-nav-default-list-item site-nav-list-item-3",attrs:{"onclick":"handleSiteNavClick(this)"}},[_c('a',{attrs:{"href":"/course-website/contents/basic-spa-requirements/program-query-language/assign-pattern-clause.html"}},[_v("Assign Pattern Clauses")])])])])]),_v(" "),_c('li',[_c('div',{staticClass:"site-nav-default-list-item site-nav-list-item-2",attrs:{"onclick":"handleSiteNavClick(this)"}},[_c('a',{attrs:{"href":"/course-website/contents/basic-spa-requirements/program-query-language/example-queries.html"}},[_v("Example queries")])])])])]),_v(" "),_c('li',[_c('div',{staticClass:"site-nav-default-list-item site-nav-list-item-1",attrs:{"onclick":"handleSiteNavClick(this)"}},[_c('a',{attrs:{"href":"/course-website/contents/basic-spa-requirements/intended-behaviour-format-results.html"}},[_v("Intended Behaviour & Format of Results")])])]),_v(" "),_c('li',[_c('div',{staticClass:"site-nav-default-list-item site-nav-list-item-1",attrs:{"onclick":"handleSiteNavClick(this)"}},[_c('a',{attrs:{"href":"/course-website/contents/basic-spa-requirements/faq.html"}},[_v("FAQ")])])])])]),_v(" "),_c('li',[_c('div',{staticClass:"site-nav-default-list-item site-nav-list-item-0",attrs:{"onclick":"handleSiteNavClick(this)"}},[_v("SPA Requirements - Advanced SPA \n\n"),_c('i',{staticClass:"site-nav-dropdown-btn-icon site-nav-rotate-icon",attrs:{"onclick":"handleSiteNavClick(this.parentNode, false); event.stopPropagation();"}},[_c('span',{staticClass:"glyphicon glyphicon-menu-down",attrs:{"aria-hidden":"true"}})])]),_c('ul',{staticClass:"site-nav-dropdown-container site-nav-dropdown-container-open site-nav-list"},[_c('li',[_c('div',{staticClass:"site-nav-default-list-item site-nav-list-item-1",attrs:{"onclick":"handleSiteNavClick(this)"}},[_c('a',{attrs:{"href":"/course-website/contents/advanced-spa-requirements/cfg.html"}},[_v("Control Flow Graph")])])]),_v(" "),_c('li',[_c('div',{staticClass:"site-nav-default-list-item site-nav-list-item-1",attrs:{"onclick":"handleSiteNavClick(this)"}},[_c('a',{attrs:{"href":"/course-website/contents/advanced-spa-requirements/design-abstractions.html"}},[_v("Design Abstractions")])])]),_v(" "),_c('li',[_c('div',{staticClass:"site-nav-default-list-item site-nav-list-item-1",attrs:{"onclick":"handleSiteNavClick(this)"}},[_v("PQL \n\n"),_c('i',{staticClass:"site-nav-dropdown-btn-icon site-nav-rotate-icon",attrs:{"onclick":"handleSiteNavClick(this.parentNode, false); event.stopPropagation();"}},[_c('span',{staticClass:"glyphicon glyphicon-menu-down",attrs:{"aria-hidden":"true"}})])]),_c('ul',{staticClass:"site-nav-dropdown-container site-nav-dropdown-container-open site-nav-list"},[_c('li',[_c('div',{staticClass:"site-nav-default-list-item site-nav-list-item-2",attrs:{"onclick":"handleSiteNavClick(this)"}},[_c('a',{attrs:{"href":"/course-website/contents/advanced-spa-requirements/pql.html"}},[_v("Introduction")])])]),_v(" "),_c('li',[_c('div',{staticClass:"site-nav-default-list-item site-nav-list-item-2",attrs:{"onclick":"handleSiteNavClick(this)"}},[_c('a',{attrs:{"href":"/course-website/contents/advanced-spa-requirements/PQL/select-clauses.html"}},[_v("Select Clauses")])])]),_v(" "),_c('li',[_c('div',{staticClass:"site-nav-default-list-item site-nav-list-item-2",attrs:{"onclick":"handleSiteNavClick(this)"}},[_c('a',{attrs:{"href":"/course-website/contents/advanced-spa-requirements/PQL/such-that-clauses.html"}},[_v("Such-That Clauses")])])]),_v(" "),_c('li',[_c('div',{staticClass:"site-nav-default-list-item site-nav-list-item-2",attrs:{"onclick":"handleSiteNavClick(this)"}},[_c('a',{attrs:{"href":"/course-website/contents/advanced-spa-requirements/PQL/pattern-clauses.html"}},[_v("Pattern Clauses")])])]),_v(" "),_c('li',[_c('div',{staticClass:"site-nav-default-list-item site-nav-list-item-2",attrs:{"onclick":"handleSiteNavClick(this)"}},[_c('a',{attrs:{"href":"/course-website/contents/advanced-spa-requirements/PQL/with-clauses.html"}},[_v("With Clauses")])])]),_v(" "),_c('li',[_c('div',{staticClass:"site-nav-default-list-item site-nav-list-item-2",attrs:{"onclick":"handleSiteNavClick(this)"}},[_c('a',{attrs:{"href":"/course-website/contents/advanced-spa-requirements/PQL/negation-of-clauses.html"}},[_v("Negation of Clauses")])])]),_v(" "),_c('li',[_c('div',{staticClass:"site-nav-default-list-item site-nav-list-item-2",attrs:{"onclick":"handleSiteNavClick(this)"}},[_c('a',{attrs:{"href":"/course-website/contents/advanced-spa-requirements/PQL/multi-clauses.html"}},[_v("Multi Clauses")])])]),_v(" "),_c('li',[_c('div',{staticClass:"site-nav-default-list-item site-nav-list-item-2",attrs:{"onclick":"handleSiteNavClick(this)"}},[_c('a',{attrs:{"href":"/course-website/contents/advanced-spa-requirements/PQL/example-queries.html"}},[_v("Example Queries")])])])])]),_v(" "),_c('li',[_c('div',{staticClass:"site-nav-default-list-item site-nav-list-item-1",attrs:{"onclick":"handleSiteNavClick(this)"}},[_c('a',{attrs:{"href":"/course-website/contents/advanced-spa-requirements/format-res.html"}},[_v("Format of Results")])])])])]),_v(" "),_c('li',[_c('div',{staticClass:"site-nav-default-list-item site-nav-list-item-0",attrs:{"onclick":"handleSiteNavClick(this)"}},[_v("Project Requirements - Milestone 1 \n\n"),_c('i',{staticClass:"site-nav-dropdown-btn-icon site-nav-rotate-icon",attrs:{"onclick":"handleSiteNavClick(this.parentNode, false); event.stopPropagation();"}},[_c('span',{staticClass:"glyphicon glyphicon-menu-down",attrs:{"aria-hidden":"true"}})])]),_c('ul',{staticClass:"site-nav-dropdown-container site-nav-dropdown-container-open site-nav-list"},[_c('li',[_c('div',{staticClass:"site-nav-default-list-item site-nav-list-item-1",attrs:{"onclick":"handleSiteNavClick(this)"}},[_c('a',{attrs:{"href":"/course-website/contents/project-requirements-1/scope.html"}},[_v("Scope")])])]),_v(" "),_c('li',[_c('div',{staticClass:"site-nav-default-list-item site-nav-list-item-1",attrs:{"onclick":"handleSiteNavClick(this)"}},[_c('a',{attrs:{"href":"/course-website/contents/project-requirements-1/admin.html"}},[_v("Administrative Matters")])])]),_v(" "),_c('li',[_c('div',{staticClass:"site-nav-default-list-item site-nav-list-item-1",attrs:{"onclick":"handleSiteNavClick(this)"}},[_c('a',{attrs:{"href":"/course-website/contents/project-requirements-1/tips.html"}},[_v("Tips")])])])])]),_v(" "),_c('li',[_c('div',{staticClass:"site-nav-default-list-item site-nav-list-item-0",attrs:{"onclick":"handleSiteNavClick(this)"}},[_v("Project Requirements - Milestone 2 \n\n"),_c('i',{staticClass:"site-nav-dropdown-btn-icon site-nav-rotate-icon",attrs:{"onclick":"handleSiteNavClick(this.parentNode, false); event.stopPropagation();"}},[_c('span',{staticClass:"glyphicon glyphicon-menu-down",attrs:{"aria-hidden":"true"}})])]),_c('ul',{staticClass:"site-nav-dropdown-container site-nav-dropdown-container-open site-nav-list"},[_c('li',[_c('div',{staticClass:"site-nav-default-list-item site-nav-list-item-1",attrs:{"onclick":"handleSiteNavClick(this)"}},[_c('a',{attrs:{"href":"/course-website/contents/project-requirements-2/scope.html"}},[_v("Scope")])])]),_v(" "),_c('li',[_c('div',{staticClass:"site-nav-default-list-item site-nav-list-item-1",attrs:{"onclick":"handleSiteNavClick(this)"}},[_c('a',{attrs:{"href":"/course-website/contents/project-requirements-2/admin.html"}},[_v("Administrative Matters")])])]),_v(" "),_c('li',[_c('div',{staticClass:"site-nav-default-list-item site-nav-list-item-1",attrs:{"onclick":"handleSiteNavClick(this)"}},[_c('a',{attrs:{"href":"/course-website/contents/project-requirements-2/tips.html"}},[_v("Tips")])])])])]),_v(" "),_c('li',[_c('div',{staticClass:"site-nav-default-list-item site-nav-list-item-0",attrs:{"onclick":"handleSiteNavClick(this)"}},[_v("Project Requirements - Milestone 3 \n\n"),_c('i',{staticClass:"site-nav-dropdown-btn-icon site-nav-rotate-icon",attrs:{"onclick":"handleSiteNavClick(this.parentNode, false); event.stopPropagation();"}},[_c('span',{staticClass:"glyphicon glyphicon-menu-down",attrs:{"aria-hidden":"true"}})])]),_c('ul',{staticClass:"site-nav-dropdown-container site-nav-dropdown-container-open site-nav-list"},[_c('li',[_c('div',{staticClass:"site-nav-default-list-item site-nav-list-item-1",attrs:{"onclick":"handleSiteNavClick(this)"}},[_c('a',{attrs:{"href":"/course-website/contents/project-requirements-3/scope.html"}},[_v("Scope")])])]),_v(" "),_c('li',[_c('div',{staticClass:"site-nav-default-list-item site-nav-list-item-1",attrs:{"onclick":"handleSiteNavClick(this)"}},[_c('a',{attrs:{"href":"/course-website/contents/project-requirements-3/admin.html"}},[_v("Administrative Matters")])])])])]),_v(" "),_c('li',[_c('div',{staticClass:"site-nav-default-list-item site-nav-list-item-0",attrs:{"onclick":"handleSiteNavClick(this)"}},[_v("Project Requirements - Guidelines \n\n"),_v(" "),_c('i',{staticClass:"site-nav-dropdown-btn-icon site-nav-rotate-icon",attrs:{"onclick":"handleSiteNavClick(this.parentNode, false); event.stopPropagation();"}},[_c('span',{staticClass:"glyphicon glyphicon-menu-down",attrs:{"aria-hidden":"true"}})])]),_c('ul',{staticClass:"site-nav-dropdown-container site-nav-dropdown-container-open site-nav-list"},[_c('li',[_c('div',{staticClass:"site-nav-default-list-item site-nav-list-item-1",attrs:{"onclick":"handleSiteNavClick(this)"}},[_v("Code Submission Guidelines \n\n"),_c('i',{staticClass:"site-nav-dropdown-btn-icon site-nav-rotate-icon",attrs:{"onclick":"handleSiteNavClick(this.parentNode, false); event.stopPropagation();"}},[_c('span',{staticClass:"glyphicon glyphicon-menu-down",attrs:{"aria-hidden":"true"}})])]),_c('ul',{staticClass:"site-nav-dropdown-container site-nav-dropdown-container-open site-nav-list"},[_c('li',[_c('div',{staticClass:"site-nav-default-list-item site-nav-list-item-2",attrs:{"onclick":"handleSiteNavClick(this)"}},[_c('a',{attrs:{"href":"/course-website/contents/project-requirement-guidelines/csg.html"}},[_v("Introduction")])])]),_v(" "),_c('li',[_c('div',{staticClass:"site-nav-default-list-item site-nav-list-item-2",attrs:{"onclick":"handleSiteNavClick(this)"}},[_c('a',{attrs:{"href":"/course-website/contents/project-requirement-guidelines/sub-format-check.html"}},[_v("Submission Format Checker")])])])])]),_v(" "),_c('li',[_c('div',{staticClass:"site-nav-default-list-item site-nav-list-item-1",attrs:{"onclick":"handleSiteNavClick(this)"}},[_c('a',{attrs:{"href":"/course-website/contents/project-requirement-guidelines/rsg.html"}},[_v("Report Submission Guidelines")])])]),_v(" "),_c('li',[_c('div',{staticClass:"site-nav-default-list-item site-nav-list-item-1",attrs:{"onclick":"handleSiteNavClick(this)"}},[_c('a',{attrs:{"href":"/course-website/contents/project-requirement-guidelines/cdg.html"}},[_v("Code Demonstration Guidelines")])])]),_v(" "),_c('li',[_c('div',{staticClass:"site-nav-default-list-item site-nav-list-item-1",attrs:{"onclick":"handleSiteNavClick(this)"}},[_c('a',{attrs:{"href":"/course-website/contents/project-requirement-guidelines/gg.html"}},[_v("Grading Guidelines")])])])])]),_v(" "),_c('li',[_c('div',{staticClass:"site-nav-default-list-item site-nav-list-item-0",attrs:{"onclick":"handleSiteNavClick(this)"}},[_c('a',{attrs:{"href":"/course-website/contents/reference.html"}},[_v("Reference Books")])])])])],1)],1)]),_v(" "),_m(0),_v(" "),_c('overlay-source',{attrs:{"id":"page-nav","tag-name":"nav","to":"page-nav"}},[_c('div',{staticClass:"nav-component slim-scroll"},[_c('a',{pre:true,attrs:{"class":"navbar-brand page-nav-title","href":"#"}},[_v("Chapters of This Page")]),_v(" "),_c('overlay-source',{staticClass:"nav nav-pills flex-column my-0 small no-flex-wrap",attrs:{"id":"mb-page-nav","tag-name":"nav","to":"mb-page-nav"}},[_c('a',{pre:true,attrs:{"class":"nav-link py-1","href":"#simple-programming-language"}},[_v("SIMPLE Programming Language‚Äé")]),_v(" "),_c('a',{pre:true,attrs:{"class":"nav-link py-1","href":"#general-information"}},[_v("General Information‚Äé")]),_v(" "),_c('a',{pre:true,attrs:{"class":"nav-link py-1","href":"#concrete-syntax-grammar-csg"}},[_v("Concrete Syntax Grammar (CSG)‚Äé")]),_v(" "),_c('a',{pre:true,attrs:{"class":"nav-link py-1","href":"#other-rules"}},[_v("Other Rules‚Äé")]),_v(" "),_c('a',{pre:true,attrs:{"class":"nav-link py-1","href":"#statement-numbers"}},[_v("Statement Numbers‚Äé")]),_v(" "),_c('a',{pre:true,attrs:{"class":"nav-link py-1","href":"#abstract-syntax-grammar-asg"}},[_v("Abstract Syntax Grammar (ASG)‚Äé")])])],1)])],1),_v(" "),_m(1)])}
};
    var pageVueStaticRenderFns = [function anonymous(
) {
with(this){return _c('div',{attrs:{"id":"content-wrapper"}},[_c('br'),_v(" "),_c('h1',{attrs:{"id":"simple-programming-language"}},[_c('span',{staticClass:"anchor",attrs:{"id":"simple-programming-language"}}),_c('a',{attrs:{"href":"#simple-programming-language"}}),_v("SIMPLE Programming Language"),_c('a',{staticClass:"fa fa-anchor",attrs:{"href":"#simple-programming-language","onclick":"event.stopPropagation()"}})]),_v(" "),_c('p',[_v("The static analysis is done on a programming language called SIMPLE. It is designed for the purpose of experimenting with SPA techniques and allows students to complete the project in one semester. It is not a language for solving real programming problems. However, it contains all the basic constructs of a programming language for writing meaningful programs.")]),_v(" "),_c('p',[_v("Several sample programs that can be written in SIMPLE are shown below:")]),_v(" "),_c('h5',{attrs:{"id":"code-1-compute-average-of-three-integer-numbers"}},[_c('span',{staticClass:"anchor",attrs:{"id":"code-1-compute-average-of-three-integer-numbers"}}),_c('a',{attrs:{"href":"#code-1-compute-average-of-three-integer-numbers"}}),_v("Code 1: Compute average of three integer numbers"),_c('a',{staticClass:"fa fa-anchor",attrs:{"href":"#code-1-compute-average-of-three-integer-numbers","onclick":"event.stopPropagation()"}})]),_v(" "),_c('pre',[_c('code',{pre:true,attrs:{"class":"line-numbers"}},[_v("procedure computeAverage {\n    read num1;\n    read num2;\n    read num3;\n\n    sum = num1 + num2 + num3;\n    ave = sum / 3;\n\n    print ave;\n}\n")])]),_v(" "),_c('h5',{attrs:{"id":"code-2-print-numbers-in-ascending-order"}},[_c('span',{staticClass:"anchor",attrs:{"id":"code-2-print-numbers-in-ascending-order"}}),_c('a',{attrs:{"href":"#code-2-print-numbers-in-ascending-order"}}),_v("Code 2: Print numbers in ascending order"),_c('a',{staticClass:"fa fa-anchor",attrs:{"href":"#code-2-print-numbers-in-ascending-order","onclick":"event.stopPropagation()"}})]),_v(" "),_c('pre',[_c('code',{pre:true,attrs:{"class":"line-numbers"}},[_v("procedure printAscending {\n    read num1;\n    read num2;\n    noSwap = 0;\n\n    if (num1 > num2) then {\n      temp = num1;\n      num1 = num2;\n      num2 = temp;\n    } else {\n      noSwap = 1;\n    }\n\n    print num1;\n    print num2;\n    print noSwap;\n}\n")])]),_v(" "),_c('h5',{attrs:{"id":"code-3-compute-the-sum-of-the-digits-of-an-integer"}},[_c('span',{staticClass:"anchor",attrs:{"id":"code-3-compute-the-sum-of-the-digits-of-an-integer"}}),_c('a',{attrs:{"href":"#code-3-compute-the-sum-of-the-digits-of-an-integer"}}),_v("Code 3: Compute the sum of the digits of an integer"),_c('a',{staticClass:"fa fa-anchor",attrs:{"href":"#code-3-compute-the-sum-of-the-digits-of-an-integer","onclick":"event.stopPropagation()"}})]),_v(" "),_c('pre',[_c('code',{pre:true,attrs:{"class":"line-numbers"}},[_v("procedure sumDigits {\n    read number;\n    sum = 0;\n\n    while (number > 0) {\n        digit = number % 10;\n        sum = sum + digit;\n        number = number / 10;\n    }\n\n    print sum;\n}\n")])]),_v(" "),_c('h5',{attrs:{"id":"code-4-program-with-multiple-procedures"}},[_c('span',{staticClass:"anchor",attrs:{"id":"code-4-program-with-multiple-procedures"}}),_c('a',{attrs:{"href":"#code-4-program-with-multiple-procedures"}}),_v("Code 4: Program with multiple procedures"),_c('a',{staticClass:"fa fa-anchor",attrs:{"href":"#code-4-program-with-multiple-procedures","onclick":"event.stopPropagation()"}})]),_v(" "),_c('pre',[_c('code',{pre:true,attrs:{"class":"line-numbers"}},[_v("    procedure main {\n01      flag = 0;\n02      call computeCentroid;\n03      call printResults;\n    }\n    procedure readPoint {\n04      read x;\n05      read y;\n    }\n    procedure printResults {\n06      print flag;\n07      print cenX;\n08      print cenY;\n09      print normSq;\n    }\n    procedure computeCentroid {\n10      count = 0;\n11      cenX = 0;\n12      cenY = 0;\n13      call readPoint;\n14      while ((x != 0) && (y != 0)) {\n15          count = count + 1;\n16          cenX = cenX + x;\n17          cenY = cenY + y;\n18          call readPoint;\n        }\n19      if (count == 0) then {\n20          flag = 1;\n        } else {\n21          cenX = cenX / count;\n22          cenY = cenY / count;\n        }\n23      normSq = cenX * cenX + cenY * cenY;\n    }\n")])]),_v(" "),_c('h1',{attrs:{"id":"general-information"}},[_c('span',{staticClass:"anchor",attrs:{"id":"general-information"}}),_c('a',{attrs:{"href":"#general-information"}}),_v("General Information"),_c('a',{staticClass:"fa fa-anchor",attrs:{"href":"#general-information","onclick":"event.stopPropagation()"}})]),_v(" "),_c('p',[_v("The following are some general information:")]),_v(" "),_c('ul',[_c('li',[_c('strong',[_v("Program")]),_v(": Made up of one or more procedures")]),_v(" "),_c('li',[_c('strong',[_v("Procedure")]),_v(": Non-empty list of statements with no parameters, nesting nor recursion")]),_v(" "),_c('li',[_c('strong',[_v("Variable")]),_v(": Unique names, global scope, integer type, and does not have declarations")]),_v(" "),_c('li',[_c('strong',[_v("Statement")]),_v(": Assignments, while loops, if-then-else statements, call statements, print statements or read statements")]),_v(" "),_c('li',[_c('strong',[_v("Condition")]),_v(": Boolean expressions containing operators")]),_v(" "),_c('li',[_c('strong',[_v("Operator")]),_v(": "),_c('code',{pre:true,attrs:{"class":"line-numbers hljs inline no-lang"}},[_v("+, -, *, /, %, <, >")]),_v(", etc.")]),_v(" "),_c('li',[_v("No arrays, no pointers")])]),_v(" "),_c('p',[_v("Program statements are of the following types:")]),_v(" "),_c('ul',[_c('li',[_v("Call statements\n"),_c('ul',[_c('li',[_v("Invokes a procedure by its name.")]),_v(" "),_c('li',[_v("E.g. "),_c('code',{pre:true,attrs:{"class":"line-numbers hljs inline no-lang"}},[_v("call readPoint;")])])])]),_v(" "),_c('li',[_v("Assignment statement\n"),_c('ul',[_c('li',[_v("Assigns the results of the expression on the right to the variable on the left.")]),_v(" "),_c('li',[_v("E.g. "),_c('code',{pre:true,attrs:{"class":"line-numbers hljs inline no-lang"}},[_v("x = a + 2 * b;")])])])]),_v(" "),_c('li',[_v("While statement\n"),_c('ul',[_c('li',[_v("Executes statements in the body until the condition becomes false.")]),_v(" "),_c('li',[_v("E.g. "),_c('code',{pre:true,attrs:{"class":"line-numbers hljs inline no-lang"}},[_v("while (i > 0) { ... }")])])])]),_v(" "),_c('li',[_v("If statement\n"),_c('ul',[_c('li',[_v("Executes statements in the "),_c('code',{pre:true,attrs:{"class":"line-numbers hljs inline no-lang"}},[_v("then")]),_v(" branch if condition is true; otherwise executes statements in the "),_c('code',{pre:true,attrs:{"class":"line-numbers hljs inline no-lang"}},[_v("else")]),_v(" branch.")]),_v(" "),_c('li',[_v("The "),_c('code',{pre:true,attrs:{"class":"line-numbers hljs inline no-lang"}},[_v("else")]),_v(" branch is mandatory.")]),_v(" "),_c('li',[_v("E.g. "),_c('code',{pre:true,attrs:{"class":"line-numbers hljs inline no-lang"}},[_v("if (i > 0) then { ... } else { ... }")])])])]),_v(" "),_c('li',[_v("Read statement\n"),_c('ul',[_c('li',[_v("Reads the value from standard input (console) and assigns it to the variable.")]),_v(" "),_c('li',[_v("It is similar to "),_c('code',{pre:true,attrs:{"class":"line-numbers hljs inline no-lang"}},[_v("scanf")]),_v(" and "),_c('code',{pre:true,attrs:{"class":"line-numbers hljs inline no-lang"}},[_v("cin")]),_v(" in C/C++, and does not read the value from the variable.")]),_v(" "),_c('li',[_v("E.g. "),_c('code',{pre:true,attrs:{"class":"line-numbers hljs inline no-lang"}},[_v("read x;")])])])]),_v(" "),_c('li',[_v("Print output\n"),_c('ul',[_c('li',[_v("Outputs the value of the variable to standard output (console).")]),_v(" "),_c('li',[_v("E.g. "),_c('code',{pre:true,attrs:{"class":"line-numbers hljs inline no-lang"}},[_v("print x;")])])])])]),_v(" "),_c('h1',{attrs:{"id":"concrete-syntax-grammar-csg"}},[_c('span',{staticClass:"anchor",attrs:{"id":"concrete-syntax-grammar-csg"}}),_c('a',{attrs:{"href":"#concrete-syntax-grammar-csg"}}),_v("Concrete Syntax Grammar (CSG)"),_c('a',{staticClass:"fa fa-anchor",attrs:{"href":"#concrete-syntax-grammar-csg","onclick":"event.stopPropagation()"}})]),_v(" "),_c('p',[_v("A source program written in SIMPLE is syntactically valid if it follows all the defined language rules. The rules are defined as a "),_c('strong',[_v("Concrete Syntax Grammar (CSG)")]),_v(".")]),_v(" "),_c('p',[_v("CSG contains rules (or grammar productions) that are written using terminals (keywords) and non-terminals.")]),_v(" "),_c('ul',[_c('li',[_v("Terminals (keywords) are between apostrophes\n"),_c('ul',[_c('li',[_v("E.g. "),_c('code',{pre:true,attrs:{"class":"line-numbers hljs inline no-lang"}},[_v("'procedure'")]),_v(", "),_c('code',{pre:true,attrs:{"class":"line-numbers hljs inline no-lang"}},[_v("')'")]),_v(", "),_c('code',{pre:true,attrs:{"class":"line-numbers hljs inline no-lang"}},[_v("'+'")]),_v(", "),_c('code',{pre:true,attrs:{"class":"line-numbers hljs inline no-lang"}},[_v("'while'")]),_v(", "),_c('code',{pre:true,attrs:{"class":"line-numbers hljs inline no-lang"}},[_v("'if'")]),_v(", etc.")])])]),_v(" "),_c('li',[_v("Non-terminals are in lower-casing\n"),_c('ul',[_c('li',[_v("E.g. "),_c('code',{pre:true,attrs:{"class":"line-numbers hljs inline no-lang"}},[_v("var_name")]),_v(", "),_c('code',{pre:true,attrs:{"class":"line-numbers hljs inline no-lang"}},[_v("term")]),_v(", "),_c('code',{pre:true,attrs:{"class":"line-numbers hljs inline no-lang"}},[_v("expr")]),_v(", "),_c('code',{pre:true,attrs:{"class":"line-numbers hljs inline no-lang"}},[_v("stmt_list")]),_v(", etc.")])])])]),_v(" "),_c('p',[_v("For example, the grammar for SIMPLE starts with a non-terminal "),_c('code',{pre:true,attrs:{"class":"line-numbers hljs inline no-lang"}},[_v("program")]),_v(". A program contains one or more procedures. Each procedure is defined using the terminal keyword "),_c('code',{pre:true,attrs:{"class":"line-numbers hljs inline no-lang"}},[_v("'procedure'")]),_v(", followed by a procedure name (non-terminal "),_c('code',{pre:true,attrs:{"class":"line-numbers hljs inline no-lang"}},[_v("proc_name")]),_v("), followed by the keyword "),_c('code',{pre:true,attrs:{"class":"line-numbers hljs inline no-lang"}},[_v("'{'")]),_v(", followed by a statement list (non-terminal "),_c('code',{pre:true,attrs:{"class":"line-numbers hljs inline no-lang"}},[_v("stmtLst")]),_v("), followed by "),_c('code',{pre:true,attrs:{"class":"line-numbers hljs inline no-lang"}},[_v("'}'")]),_v(". Non-terminal "),_c('code',{pre:true,attrs:{"class":"line-numbers hljs inline no-lang"}},[_v("stmtLst")]),_v(" contains one or more statements ("),_c('code',{pre:true,attrs:{"class":"line-numbers hljs inline no-lang"}},[_v("stmt")]),_v("), and "),_c('code',{pre:true,attrs:{"class":"line-numbers hljs inline no-lang"}},[_v("stmt")]),_v(" can be a read, print, call, while, if or assign statement.")]),_v(" "),_c('p',[_c('strong',[_v("Meta symbols:")])]),_v(" "),_c('pre',[_c('code',{pre:true,attrs:{"class":"line-numbers"}},[_v("a*        - repetition 0 or more times of a\na+        - repetition 1 or more times of a\na | b     - a or b\nBrackets ( and ) are used for grouping\n")])]),_v(" "),_c('p',[_c('strong',[_v("Lexical tokens:")])]),_v(" "),_c('pre',[_c('code',{pre:true,attrs:{"class":"line-numbers"}},[_v("LETTER: A-Z | a-z                - capital or small letter\nDIGIT: 0-9\nNZDIGIT: 1-9                          - non-zero digit\nNAME: LETTER (LETTER | DIGIT)*   - procedure names and variables are strings of\n                                   letters, and digits, starting with a letter\nINTEGER : 0 | NZDIGIT ( DIGIT )*      - Constants are sequence of digits with no leading zero\n")])]),_v(" "),_c('p',[_c('strong',[_v("Grammar rules:")])]),_v(" "),_c('pre',[_c('code',{pre:true,attrs:{"class":"line-numbers"}},[_v("program: procedure+\nprocedure: 'procedure' proc_name '{' stmtLst '}'\nstmtLst: stmt+\nstmt: read | print | call | while | if | assign\n\nread: 'read' var_name';'\nprint: 'print' var_name';'\ncall: 'call' proc_name';'\nwhile: 'while' '(' cond_expr ')' '{' stmtLst '}'\nif: 'if' '(' cond_expr ')' 'then' '{' stmtLst '}' 'else' '{' stmtLst '}'\nassign: var_name '=' expr ';'\n\ncond_expr: rel_expr | '!' '(' cond_expr ')' |\n           '(' cond_expr ')' '&&' '(' cond_expr ')' |\n           '(' cond_expr ')' '||' '(' cond_expr ')'\n\nrel_expr: rel_factor '>' rel_factor | rel_factor '>=' rel_factor |\n          rel_factor '<' rel_factor | rel_factor '<=' rel_factor |\n          rel_factor '==' rel_factor | rel_factor '!=' rel_factor\n\nrel_factor: var_name | const_value | expr\nexpr: expr '+' term | expr '-' term | term\nterm: term '*' factor | term '/' factor | term '%' factor | factor\nfactor: var_name | const_value | '(' expr ')'\n\nvar_name, proc_name: NAME\nconst_value: INTEGER\n")])]),_v(" "),_c('p',[_c('strong',[_v("Note:")])]),_v(" "),_c('ol',[_c('li',[_c('p',[_v("SIMPLE is case-sensitive. The grammar shows the accepted casing for the keywords of the language. Due to case-sensitivity, variables \"abc\" and \"Abc\" are two different variables.")])]),_v(" "),_c('li',[_c('p',[_v("Whitespaces (including multiple spaces, tabs, or no spaces) can be used freely in SIMPLE. For example, tokenizer should recognize three tokens "),_c('code',{pre:true,attrs:{"class":"line-numbers hljs inline no-lang"}},[_v("x")]),_v(", "),_c('code',{pre:true,attrs:{"class":"line-numbers hljs inline no-lang"}},[_v("+")]),_v(" and "),_c('code',{pre:true,attrs:{"class":"line-numbers hljs inline no-lang"}},[_v("y")]),_v(" in any of the following character streams:")]),_v(" "),_c('ul',[_c('li',[_c('code',{pre:true,attrs:{"class":"line-numbers hljs inline no-lang"}},[_v("x+y")])]),_v(" "),_c('li',[_c('code',{pre:true,attrs:{"class":"line-numbers hljs inline no-lang"}},[_v("x + y")])]),_v(" "),_c('li',[_c('code',{pre:true,attrs:{"class":"line-numbers hljs inline no-lang"}},[_v("x +y")])])])]),_v(" "),_c('li',[_c('p',[_v("Procedure names, variable names and terminals can all be the same.")]),_v(" "),_c('ul',[_c('li',[_v("E.g. "),_c('code',{pre:true,attrs:{"class":"line-numbers hljs inline no-lang"}},[_v("read read; read = read + 1;")])])])]),_v(" "),_c('li',[_c('p',[_v("Logical expressions may only appear as the conditions for while / if statements and they are fully bracketed.")])]),_v(" "),_c('li',[_c('p',[_v("There are no boolean values ("),_c('code',{pre:true,attrs:{"class":"line-numbers hljs inline no-lang"}},[_v("true")]),_v(" / "),_c('code',{pre:true,attrs:{"class":"line-numbers hljs inline no-lang"}},[_v("false")]),_v(").")])]),_v(" "),_c('li',[_c('p',[_v("Expressions are left-associative due to the following grammar rules:")]),_v(" "),_c('p',[_v("expr: expr '+' term | expr '-' term | term\nterm: term '*' factor | term '/' factor | term '%' factor | factor\nfactor: var_name | const_value | '(' expr ')'")])])]),_v(" "),_c('h1',{attrs:{"id":"other-rules"}},[_c('span',{staticClass:"anchor",attrs:{"id":"other-rules"}}),_c('a',{attrs:{"href":"#other-rules"}}),_v("Other Rules"),_c('a',{staticClass:"fa fa-anchor",attrs:{"href":"#other-rules","onclick":"event.stopPropagation()"}})]),_v(" "),_c('p',[_v("A syntactically valid source program written in SIMPLE is semantically invalid if it violates rules that cannot be captured by the CSG.")]),_v(" "),_c('p',[_c('strong',[_v("The following are rules that cannot be captured by CSG:")])]),_v(" "),_c('ol',[_c('li',[_v("A program cannot have two procedures with the same name.")]),_v(" "),_c('li',[_v("A procedure cannot call a non-existing procedure.")]),_v(" "),_c('li',[_v("Recursive and cyclic calls are not allowed.\n"),_c('ul',[_c('li',[_v("E.g. Procedure A calls procedure B, procedure B calls procedure C, and procedure C calls procedure A.")]),_v(" "),_c('li',[_v("E.g. Procedure A calls procedure A.")])])])]),_v(" "),_c('h1',{attrs:{"id":"statement-numbers"}},[_c('span',{staticClass:"anchor",attrs:{"id":"statement-numbers"}}),_c('a',{attrs:{"href":"#statement-numbers"}}),_v("Statement Numbers"),_c('a',{staticClass:"fa fa-anchor",attrs:{"href":"#statement-numbers","onclick":"event.stopPropagation()"}})]),_v(" "),_c('p',[_v("The statements in a SIMPLE program are indexed for easy referencing and are not part of the syntax. The first statement in the program located in the first procedure of the program is statement number 1 (stmt #1). The numbering continues from one procedure to the next.")]),_v(" "),_c('p',[_v("The procedure definition does not receive an index. Furthermore, empty lines, "),_c('code',{pre:true,attrs:{"class":"line-numbers hljs inline no-lang"}},[_v("else")]),_v(" keywords on a line, curly brackets on a line do not receive an index.")]),_v(" "),_c('p',[_v("An example of how statements are numbered is shown in "),_c('a',{attrs:{"href":"#code-4-program-with-multiple-procedures"}},[_v("Code 4")]),_v(".")]),_v(" "),_c('h1',{attrs:{"id":"abstract-syntax-grammar-asg"}},[_c('span',{staticClass:"anchor",attrs:{"id":"abstract-syntax-grammar-asg"}}),_c('a',{attrs:{"href":"#abstract-syntax-grammar-asg"}}),_v("Abstract Syntax Grammar (ASG)"),_c('a',{staticClass:"fa fa-anchor",attrs:{"href":"#abstract-syntax-grammar-asg","onclick":"event.stopPropagation()"}})]),_v(" "),_c('p',[_v("A CSG defines the language and its vocabulary. However, you may need to use abstractions to define a language. In that case, the ASG defines the relationships among different abstractions in a language, without defining the exact vocabulary.")]),_v(" "),_c('p',[_v("For example, an expression (non-terminal "),_c('code',{pre:true,attrs:{"class":"line-numbers hljs inline no-lang"}},[_v("expr")]),_v(") in the ASG of SIMPLE may be a "),_c('code',{pre:true,attrs:{"class":"line-numbers hljs inline no-lang"}},[_v("plus")]),_v(", "),_c('code',{pre:true,attrs:{"class":"line-numbers hljs inline no-lang"}},[_v("minus")]),_v(", "),_c('code',{pre:true,attrs:{"class":"line-numbers hljs inline no-lang"}},[_v("times")]),_v(", "),_c('code',{pre:true,attrs:{"class":"line-numbers hljs inline no-lang"}},[_v("div")]),_v(", or "),_c('code',{pre:true,attrs:{"class":"line-numbers hljs inline no-lang"}},[_v("mod")]),_v(" expression or a reference (non-terminal "),_c('code',{pre:true,attrs:{"class":"line-numbers hljs inline no-lang"}},[_v("ref")]),_v(").")]),_v(" "),_c('p',[_v("There can be multiple CSGs for the same ASG.")]),_v(" "),_c('p',[_c('strong',[_v("Meta symbols:")])]),_v(" "),_c('pre',[_c('code',{pre:true,attrs:{"class":"line-numbers"}},[_v("a+        - repetition 1 or more times of a\na | b     - a or b\n")])]),_v(" "),_c('p',[_c('strong',[_v("Lexical tokens:")])]),_v(" "),_c('pre',[_c('code',{pre:true,attrs:{"class":"line-numbers"}},[_v("LETTER: A-Z | a-z               - capital or small letter\nDIGIT: 0-9\nNZDIGIT: 1-9\nNAME: LETTER (LETTER | DIGIT)*\nINTEGER: 0 | NZDIGIT ( DIGIT )*\n")])]),_v(" "),_c('p',[_c('strong',[_v("Grammar rules:")])]),_v(" "),_c('pre',[_c('code',{pre:true,attrs:{"class":"line-numbers"}},[_v("program: procedure+\nprocedure: stmtLst\nstmtLst: stmt+\nstmt: read | print | call | while | if | assign\n\nread, print: variable\nwhile: cond_expr stmtLst\nif: cond_expr  stmtLst stmtLst\nassign: variable expr\n\ncond_expr: rel_expr | not | and | or\nnot: cond_expr\nand, or: cond_expr cond_expr\n\nrel_expr: gt | gte | lt | lte | eq | neq\ngt, gte, lt, lte, eq, neq: rel_factor rel_factor\nrel_factor: variable | constant | expr\n\nexpr: plus | minus | times | div | mod | ref\nplus, minus, times, div, mod: expr expr\n\nref: variable | constant\n")])]),_v(" "),_c('p',[_c('strong',[_v("Attributes and value types:")])]),_v(" "),_c('pre',[_c('code',{pre:true,attrs:{"class":"line-numbers"}},[_v("procedure.procName, call.procName, variable.varName, read.varName, print.varName: NAME\nconstant.value: INTEGER\nstmt.stmt#, read.stmt#, print.stmt#, call.stmt#, while.stmt#, if.stmt#, assign.stmt#: INTEGER\n")])]),_v(" "),_c('i',{staticClass:"fa fa-arrow-circle-up fa-lg d-print-none",attrs:{"id":"scroll-top-button","onclick":"handleScrollTop()","aria-hidden":"true"}})])}
},function anonymous(
) {
with(this){return _c('footer',[_c('div',{staticClass:"text-center"},[_c('small',[_v("[Generated by "),_c('a',{attrs:{"href":"https://markbind.org/"}},[_v("MarkBind 4.0.2")]),_v("]")])])])}
}];
  